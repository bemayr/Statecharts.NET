<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var minGenerics = 2;
var maxGenerics = 10;

string GenerateForArity(int arity, string template, string separator) =>
    string.Join(separator, Enumerable.Range(0, arity).Select(position => string.Format(template, position)));
string Generics(int arity) =>
    GenerateForArity(arity, "T{0}", ", ");
#>
using System;

namespace Statecharts.NET.Utilities
{
<#foreach(var arity in Enumerable.Range(minGenerics, maxGenerics)){#>
    public class Union<TBase, <#= Generics(arity) #>>
        <#= GenerateForArity(arity, $"where T{{0}} : TBase", $"{Environment.NewLine}        ") #>
    {
        internal readonly int _index;
        <#= GenerateForArity(arity, "internal readonly T{0} _value{0};", $"{Environment.NewLine}        ") #>

        protected Union(int index, <#= GenerateForArity(arity, "T{0} value{0} = default", ", ") #>)
        {
            _index = index;
            <#= GenerateForArity(arity, "_value{0} = value{0};", $"{Environment.NewLine}            ") #>
        }

        protected Union()
        {
            switch (this)
            {
                <#= GenerateForArity(arity, $"case T{{0}} _: _index = {{0}}; _value{{0}} = (T{{0}})(object)this; return;", $"{Environment.NewLine}                ") #>
            }
        }

        <#= GenerateForArity(arity, $"public static implicit operator Union<TBase, {Generics(arity)}>(T{{0}} t) => new Union<TBase, {Generics(arity)}>({{0}}, value{{0}}: t);", $"{Environment.NewLine}        ") #>

        private bool Equals(Union<TBase, <#= Generics(arity) #>> other)
        {
            if (_index != other._index) return false;
            switch (_index)
            {
                <#= GenerateForArity(arity, $"case {{0}}: return Equals(_value{{0}}, other._value{{0}});", $"{Environment.NewLine}                ") #>
                default: return false;
            }
        }

        private TBase AsBase()
        {
            switch (_index)
            {
                <#= GenerateForArity(arity, $"case {{0}}: return _value{{0}};", $"{Environment.NewLine}                ") #>
                default: throw new InvalidOperationException("Unexpected index, which indicates a problem in the Union codegen.");
            }
        }
    }
<#}#>

    public static class UnionExtensions {
<#foreach(var arity in Enumerable.Range(minGenerics, maxGenerics)){#>
        public static TResult Match<TBase, <#= Generics(arity) #>, TResult>(this Union<TBase, <#= Generics(arity) #>> union, <#= GenerateForArity(arity, "Func<T{0}, TResult> f{0}", ", ") #>)
            <#= GenerateForArity(arity, $"where T{{0}} : TBase", $"{Environment.NewLine}            ") #>
        {
            switch (union._index)
            {
                <#= GenerateForArity(arity, $"case {{0}} when f{{0}} != null: return f{{0}}(union._value{{0}});", $"{Environment.NewLine}                ") #>
                default: throw new InvalidOperationException("Unexpected index, which indicates a problem in the Union codegen.");
            }
        }
        public static void Switch<TBase, <#= Generics(arity) #>>(this Union<TBase, <#= Generics(arity) #>> union, <#= GenerateForArity(arity, "System.Action<T{0}> f{0}", ", ") #>)
            <#= GenerateForArity(arity, $"where T{{0}} : TBase", $"{Environment.NewLine}            ") #>
        {
            switch (union._index)
            {
                <#= GenerateForArity(arity, $"case {{0}} when f{{0}} != null: f{{0}}(union._value{{0}}); return;", $"{Environment.NewLine}                ") #>
                default: throw new InvalidOperationException("Unexpected index, which indicates a problem in the Union codegen.");
            }
        }
<#}#>
    }
}